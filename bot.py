import telebot
import config
from natasha import Doc, Segmenter, MorphVocab, NewsEmbedding, NewsMorphTagger
from deeppavlov import configs, build_model

from parse.horoscope_parser import HoroscopeParser
from parse.user import User


bot = telebot.TeleBot(config.BOT_TOKEN)
ner_model = build_model(configs.ner.ner_ontonotes_bert_mult, download=True)
horoscope_parser = HoroscopeParser()

user_dict = {}

segmenter = Segmenter()
emb = NewsEmbedding()
morph_tagger = NewsMorphTagger(emb)
morph_vocab = MorphVocab()


@bot.message_handler(commands=['start'])  # –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É 'start'
def start_message(message):
    bot.send_message(message.chat.id,
                 f"–ü—Ä–∏–≤–µ—Ç!\n"
                 f"‚Ä¢ –Ø —Ä–∞—Å—Å–∫–∞–∂—É –≤—Å—ë, —á—Ç–æ –∑–Ω–∞—é—Ç –∑–≤–µ–∑–¥—ã. –ú–æ–≥—É –ø—Ä–∏—Å–ª–∞—Ç—å —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π <b>–≥–æ—Ä–æ—Å–∫–æ–ø</b> üîÆ\n"
                 f"–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –Ω–∞–ø–∏—à–∏ /help \n"
                 f"–ß—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥, –Ω–∞–ø–∏—à–∏ /exit\n",
                 parse_mode='HTML')


@bot.message_handler(commands=['help'])  # –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É 'help'
def help_message(message):
    bot.send_message(message.chat.id,
                 f"<b>–Ø –∑–Ω–∞—é —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã</b>:\n\n"
                 f"/help - <i>–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ</i>\n\n"
                 f"/exit - <i>–í—ã—Ö–æ–¥</i>\n\n"
                 f"–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø -- –Ω–∞–ø–∏—à–∏ –º–Ω–µ –æ–± —ç—Ç–æ–º, —è —Ç–µ–±—è –ø–æ–π–º—É!",
                 parse_mode='HTML')


@bot.message_handler(commands=['exit'])  # –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É 'exit'
def end_message(message):
    user_dict[message.chat.id].needs_greet = True
    bot.send_message(message.chat.id,
                     f"–†–∞–¥–∞ –±—ã–ª–∞ –ø–æ–º–æ—á—å! –î–æ –≤—Å—Ç—Ä–µ—á–∏!\n")


def is_bye(message):
    message = Doc(message.text)
    message.segment(segmenter)
    message.tag_morph(morph_tagger)
    cnt = 0
    for token in message.tokens:
        token.lemmatize(morph_vocab)
        if token.lemma.lower() in ['–ø–æ–∫–∞', '—Å–≤–∏–¥–∞–Ω–∏–µ']:
            cnt += 1
    return cnt


@bot.message_handler(content_types=['text'])  # –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
def get_text(message):
    # try:
        chat_id = message.chat.id
        
        if chat_id not in user_dict:
            user_dict[chat_id] = User()
        
        if is_bye(message):
            user_dict[chat_id].needs_greet = True
            bot.send_message(chat_id, "–†–∞–¥–∞ –±—ã–ª–∞ –ø–æ–º–æ—á—å! –î–æ –≤—Å—Ç—Ä–µ—á–∏!")
            return
        
        if user_dict[chat_id].needs_greet:
            user_dict[chat_id].needs_greet = False
            bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç!")

        # query classification
        horoscope_cnt = 0
        doc = Doc(message.text)
        doc.segment(segmenter)
        doc.tag_morph(morph_tagger)
        for token in doc.tokens:
            token.lemmatize(morph_vocab)
            if token.lemma in horoscope_parser.keywords:
                horoscope_cnt += 1
            
        if horoscope_cnt == 0:
            bot.reply_to(message, '–Ø –Ω–µ –ø–æ–Ω—è–ª–∞, —á–µ–≥–æ –≤—ã –æ—Ç –º–µ–Ω—è —Ö–æ—Ç–∏—Ç–µ((((\n'
                                  '–°–ø—Ä–æ—Å–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –µ—â–µ —Ä–∞–∑ –∫–∞–∫-–Ω–∏–±—É–¥—å –ø–æ-–¥—Ä—É–≥–æ–º—É')
            return
        
        else:
            bot.reply_to(message, '–í–æ—Ç –æ —á–µ–º –º–Ω–µ —Ä–∞—Å—Å–∫–∞–∑–∞–ª–∏ –∑–≤–µ–∑–¥—ã:')
            process_horoscope_step(message)
            return
        
    # except Exception as e:
    #     bot.reply_to(message, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...')


def process_horoscope_step(message):
    horo_date = horoscope_parser.process_date(message.text, ner_model)
    user_dict[message.chat.id].horo_date = horo_date

    # try to find horo sign
    horo_sign = horoscope_parser.process_sign(message.text)
    if horo_sign is None:
        msg = bot.reply_to(message, '–ù–∞–∑–æ–≤–∏ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ üîÆ')
        bot.register_next_step_handler(msg, process_sign_step)
    else:
        user_dict[message.chat.id].horo_sign = horo_sign
        generate_horo(message)


def process_sign_step(message):
    chat_id = message.chat.id
    horo_sign = horoscope_parser.process_sign(message.text)
    if horo_sign is None:
        msg = bot.reply_to(message, '–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ! –ù–∞–∑–æ–≤–∏ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ üîÆ')
        bot.register_next_step_handler(msg, process_sign_step)
        return
    user_dict[chat_id].horo_sign = horo_sign
    generate_horo(message)


def generate_horo(message):
    chat_id = message.chat.id
    # get horoscope
    horo_date, horo_sign = user_dict[chat_id].horo_date, user_dict[chat_id].horo_sign
    bot.send_message(chat_id,
                     text='–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ... üßô‚Äç‚ôÄÔ∏è\n')
    final_horo = horoscope_parser.get_horo(horo_date, horo_sign)
    # send horoscope to user
    bot.send_message(chat_id,
                     text=final_horo)

    # clear for opportunity to get new horo
    user_dict[chat_id].horo_date, user_dict[chat_id].horo_sign = None, None
    bot.send_message(chat_id,
                     text='–Ø –º–æ–≥—É –µ—â–µ —á–µ–º-—Ç–æ –ø–æ–º–æ—á—å?\n–ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –ø–æ–ø—Ä–æ—â–∞–π—Å—è —Å–æ –º–Ω–æ–π –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /exit')

bot.polling(none_stop=True, interval=0)
